<?xml version="1.0" encoding="GBK"?>
<!-- 指定Spring配置文件的Schema信息 -->
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:aop="http://www.springframework.org/schema/aop"
	xmlns:tx="http://www.springframework.org/schema/tx"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	http://www.springframework.org/schema/beans/spring-beans-2.5.xsd
	http://www.springframework.org/schema/tx 
	http://www.springframework.org/schema/tx/spring-tx-2.5.xsd
	http://www.springframework.org/schema/aop 
	http://www.springframework.org/schema/aop/spring-aop-2.5.xsd">

	<bean id="mysql"
		class="org.springframework.jdbc.datasource.DriverManagerDataSource"
		lazy-init="true">
		<property name="driverClassName" value="com.mysql.jdbc.Driver" />
		<!-- 指定连接数据库的URL -->
		<property name="url" value="jdbc:mysql://localhost/newspicture" />
		<!-- 指定连接数据库的用户名 -->
		<property name="username" value="root" />
		<!-- 指定连接数据库的密码 -->
		<property name="password" value="921118" />
	</bean>

	<!-- 定义Hibernate的SessionFactory -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate4.LocalSessionFactoryBean">
		<!-- 依赖注入数据源，注入上面定义的dataSource -->
		<property name="dataSource" ref="mysql" />
		<!-- mappingResouces属性用来列出全部映射文件 -->
		<property name="packagesToScan" value="com.np.po" />
		<!-- 定义Hibernate的SessionFactory的属性 -->
		<property name="hibernateProperties">
			<props>
				<!-- 指定数据库方言 -->
				<!--prop key="hibernate.dialect"> org.hibernate.dialect.MySQLInnoDBDialect</prop -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLInnoDBDialect</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
				<!-- 是否根据需要每次自动创建数据库 -->
				<prop key="hibernate.hbm2ddl.auto">update</prop>
				<!-- 显示Hibernate持久化操作所生成的SQL -->
				<prop key="hibernate.show_sql">true</prop>
				<!-- 将SQL脚本进行格式化后再输出 -->
				<prop key="hibernate.format_sql">true</prop>
				<prop key="hibernate.connection.autocommit">true</prop>
			</props>
		</property>
	<property name="mappingResources">
			<list>
				<value>com/np/po/User.hbm.xml</value>
				<value>com/np/po/Photo.hbm.xml</value>
				<value>com/np/po/Channel.hbm.xml</value>
				<value>com/np/po/Album.hbm.xml</value>
				<value>com/np/po/Admin.hbm.xml</value>
			</list>
		</property>
	</bean>
	
	<!-- 配置UserDao组件 -->
	<bean id="UserDao" class="com.np.dao.UserDaoimpl">
		<!-- 注入SessionFactory引用 -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置PhotoDao组件 -->
	<bean id="PhotoDao" class="com.np.dao.PhotoDaoimpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置AlbumDao组件 -->
	<bean id="AlbumDao" class="com.np.dao.AlbumDaoimpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置ChannelDao组件 -->
	<bean id="ChannelDao" class="com.np.dao.ChannelDaoimpl">
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>
	<!-- 配置NService业务逻辑组件 -->
	<bean id="NService" lazy-init="true"
		class="com.np.service.NServiceImpl">
		<!-- 为业务逻辑组件注入4个DAO组件 -->
		<property name="UserDao" ref="UserDao" />
		<property name="PhotoDao" ref="PhotoDao" />
		<property name="AlbumDao" ref="AlbumDao" />
		<property name="ChannelDao" ref="ChannelDao" />
	</bean>

	<!-- 配置Hibernate的局部事务管理器，使用HibernateTransactionManager类 -->
	<!-- 该类实现PlatformTransactionManager接口，是针对Hibernate的特定实现 -->
	<bean id="transactionManager"
		class="org.springframework.orm.hibernate4.HibernateTransactionManager">
		<!-- 配置HibernateTransactionManager时需要依注入SessionFactory的引用 -->
		<property name="sessionFactory" ref="sessionFactory" />
	</bean>

	<!-- 配置事务切面Bean,指定事务管理器 -->
	<tx:advice id="txAdvice" transaction-manager="transactionManager">
		<!-- 用于配置详细的事务语义 -->
		<tx:attributes>
			<tx:method name="get*" read-only="false" propagation="NOT_SUPPORTED"/>
			<tx:method name="find*" read-only="false" propagation="NOT_SUPPORTED"/>
			<tx:method name="save*" propagation="REQUIRED"/>
			<tx:method name="update*" propagation="REQUIRED"/>
			<tx:method name="delete*" propagation="REQUIRED"/>
			<tx:method name="*" propagation="REQUIRED" />  
		</tx:attributes>
	</tx:advice>
	<aop:config>
		<!-- 配置一个切入点，匹配lee包下所有以Impl结尾的类执行的所有方法 -->
		<aop:pointcut id="dao"
			expression="execution(* com.np.dao.*Dao.*(..))" />
		<!-- 指定在leeService切入点应用txAdvice事务切面 -->
		<aop:advisor advice-ref="txAdvice" pointcut-ref="dao" />
	</aop:config>
</beans>